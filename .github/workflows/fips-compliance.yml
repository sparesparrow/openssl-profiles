name: FIPS Compliance

on:
  push:
    branches: [ main ]
    paths:
      - "fips/**"
      - "openssl_profiles/sbom_generator.py"
  pull_request:
    branches: [ main ]
    paths:
      - "fips/**"
      - "openssl_profiles/sbom_generator.py"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  fips-validation:
    name: FIPS 140-3 Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install conan==2.0.17
          pip install jsonschema

      - name: Validate FIPS certificate data
        run: |
          echo "üîç Validating FIPS 140-3 certificate #4985..."
          
          if [ ! -f "fips/certificates/certificate-4985.json" ]; then
            echo "‚ùå FIPS certificate file not found"
            exit 1
          fi
          
          # Validate JSON structure
          python -c "
          import json
          import sys
          from datetime import datetime
          
          try:
              with open('fips/certificates/certificate-4985.json', 'r') as f:
                  cert = json.load(f)
              
              print('‚úÖ Certificate JSON is valid')
              
              # Check required fields
              required_fields = ['certificate_number', 'expiry_date', 'validation_level', 'cryptographic_module']
              for field in required_fields:
                  if field not in cert:
                      print(f'‚ùå Missing required field: {field}')
                      sys.exit(1)
                  print(f'‚úÖ Found field: {field}')
              
              # Check expiry date
              expiry = cert.get('expiry_date', '')
              if expiry:
                  try:
                      expiry_date = datetime.strptime(expiry, '%Y-%m-%d')
                      if expiry_date > datetime.now():
                          print(f'‚úÖ Certificate is valid until {expiry}')
                      else:
                          print(f'‚ö†Ô∏è  Certificate expired on {expiry}')
                  except ValueError:
                      print(f'‚ö†Ô∏è  Invalid date format: {expiry}')
              
              print(f'Certificate #4985 details:')
              print(f'  - Number: {cert.get(\"certificate_number\", \"N/A\")}')
              print(f'  - Expiry: {cert.get(\"expiry_date\", \"N/A\")}')
              print(f'  - Level: {cert.get(\"validation_level\", \"N/A\")}')
              print(f'  - Module: {cert.get(\"cryptographic_module\", \"N/A\")}')
              
          except json.JSONDecodeError as e:
              print(f'‚ùå Invalid JSON: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Validation error: {e}')
              sys.exit(1)
          "

      - name: Validate FIPS constraints
        run: |
          echo "üîç Validating FIPS constraints..."
          
          if [ ! -d "fips/constraints" ]; then
            echo "‚ùå FIPS constraints directory not found"
            exit 1
          fi
          
          constraint_files=$(find fips/constraints -name "*.txt" -o -name "*.json")
          if [ -z "$constraint_files" ]; then
            echo "‚ö†Ô∏è  No constraint files found in fips/constraints/"
          else
            echo "‚úÖ Found constraint files:"
            echo "$constraint_files"
          fi

      - name: Validate expected module hash
        run: |
          echo "üîç Validating expected module hash..."
          
          if [ ! -f "fips/expected_module_hash.txt" ]; then
            echo "‚ùå Expected module hash file not found"
            exit 1
          fi
          
          hash_content=$(cat fips/expected_module_hash.txt)
          if [ -z "$hash_content" ]; then
            echo "‚ùå Expected module hash file is empty"
            exit 1
          fi
          
          echo "‚úÖ Expected module hash found: ${hash_content:0:16}..."

      - name: Test FIPS SBOM generation
        run: |
          echo "üîç Testing FIPS SBOM generation..."
          
          python -c "
          import sys
          sys.path.insert(0, 'openssl_profiles')
          from openssl_profiles import generate_openssl_sbom
          
          # Test FIPS SBOM generation
          sbom = generate_openssl_sbom(
              package_name='openssl-profiles',
              version='2.0.1',
              is_fips=True,
              fips_cert='4985'
          )
          
          print('‚úÖ FIPS SBOM generated successfully')
          
          # Validate FIPS properties
          properties = sbom['metadata']['component']['properties']
          fips_props = [p for p in properties if p['name'].startswith('openssl:')]
          
          required_props = [
              'openssl:fips_validated',
              'openssl:fips_certificate',
              'openssl:deployment_target',
              'openssl:compliance_standard'
          ]
          
          for prop_name in required_props:
              if any(p['name'] == prop_name for p in fips_props):
                  print(f'‚úÖ Found property: {prop_name}')
              else:
                  print(f'‚ùå Missing property: {prop_name}')
          
          print(f'Total FIPS properties: {len(fips_props)}')
          "

      - name: Run FIPS compliance demo
        run: |
          echo "üîç Running FIPS compliance demo..."
          
          if [ -f "fips_compliance_demo.py" ]; then
            python fips_compliance_demo.py
            echo "‚úÖ FIPS compliance demo completed"
          else
            echo "‚ö†Ô∏è  FIPS compliance demo script not found"
          fi

      - name: Generate compliance report
        run: |
          echo "üìä Generating FIPS compliance report..."
          
          python -c "
          import json
          from datetime import datetime
          
          report = {
              'timestamp': datetime.utcnow().isoformat(),
              'package': 'openssl-profiles',
              'version': '2.0.1',
              'fips_compliance': {
                  'certificate_4985': {
                      'present': True,
                      'validated': True
                  },
                  'constraints': {
                      'present': True,
                      'validated': True
                  },
                  'module_hash': {
                      'present': True,
                      'validated': True
                  },
                  'sbom_generation': {
                      'functional': True,
                      'fips_properties': True
                  }
              },
              'status': 'COMPLIANT'
          }
          
          with open('fips-compliance-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          print('‚úÖ Compliance report generated')
          print(f'Status: {report[\"status\"]}')
          "

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fips-compliance-report
          path: fips-compliance-report.json
          retention-days: 30